// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/orders": {
            "post": {
                "description": "Creates an order with the items provided and processes payment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create and pay for an order",
                "parameters": [
                    {
                        "description": "Order creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_orders_handlers.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order successfully created",
                        "schema": {
                            "$ref": "#/definitions/internal_application_orders_handlers.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/go-echo-ddd-template_pkg_responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User or product not found",
                        "schema": {
                            "$ref": "#/definitions/go-echo-ddd-template_pkg_responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Products already reserved",
                        "schema": {
                            "$ref": "#/definitions/internal_application_orders_handlers.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/go-echo-ddd-template_pkg_responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with the provided name and email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_users_handlers.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "schema": {
                            "$ref": "#/definitions/internal_application_users_handlers.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/go-echo-ddd-template_pkg_responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/go-echo-ddd-template_pkg_responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieves user details using the user ID provided in the path",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/internal_application_users_handlers.GetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/go-echo-ddd-template_pkg_responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/go-echo-ddd-template_pkg_responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get user",
                        "schema": {
                            "$ref": "#/definitions/go-echo-ddd-template_pkg_responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "go-echo-ddd-template_pkg_responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "internal_application_orders_handlers.ConflictResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "product_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "internal_application_orders_handlers.CreateRequest": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_application_orders_handlers.Item"
                    }
                }
            }
        },
        "internal_application_orders_handlers.CreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "internal_application_orders_handlers.Item": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "internal_application_users_handlers.CreateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "internal_application_users_handlers.CreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the UUID of the newly created user.",
                    "type": "string"
                }
            }
        },
        "internal_application_users_handlers.GetResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
