// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWQW8aOxD+K9a8d0RAXvIO3VvbtBGnRJFyijhM1gM42rU341kihPjvle2FsF0gqUSg",
	"l2hjxp8/z3zfjJeQu7Jylqx4yJbg8xmVGD+/M6HQLWvie3qpyUtYrdhVxGIoxhihsv3xL9MEMvhn8IY7",
	"aEAHEWskVMKqB7KoCDJAZlzAatUDppfaMGnIHhu48SbKPT1TLmFbi5WvnPW0g5YOfyeOSxTIoK6Nhg2W",
	"FzZ2Go/cg/7gD1yZSjRFCz6tdPB7YLGM5LoHb981RvUalPE7pI5+4x/M7gBuSd7jdM8tOmA3JIdp/kHy",
	"PnSjQznusHuT37HSF5aMnbhIwEgRfrtxivKZU1prJVRWBQqpr3cj6MGc2BtnIYNhf9i/CJxcRRYrAxlc",
	"9of9S+hBhTKLnAYu8I2flUtK1ORzNpUkkKQLr9CqGKpejcxUxW5uNGkVPdSHeAZj2DPSkMGd83KbkJMO",
	"ycs3pxcBP3dWyMajsKoKk8dtg2cfzls3h/dcvqNvrNqaF64pLiSZxCv+N7z4HAaNFCOFdv5igPJ1npP3",
	"k7ooFiqPO3U/lOZqODwao7bLdnAZ2TkWRqumIEqjYMPi6nQsgnmV46AhXeeirBM1cbVdJ+TL6ajcJQpe",
	"YcGEeqGYPPG8qc3/p62NEFssVCTAisKGfuwHvi5L5MXGjBsvhu6BUx/6e2PjcYgf1P4DllaoLL2qEJs8",
	"LTN683XoeAqtVuvW2fX3g/9se2+PyLO4uzVn9kl5l7fPZm1jqzoZ++9Q8B4Bb6S3JeGk2i0FD5ZGrwKt",
	"Ke1Q8T0JG5qTTxLWJGiK8I+x06jluDy63ppVNmkcZdYRdPOo8CMdpyNjSRJN9LjcVfPRNYShDBk0aOmF",
	"AHGit1Xa28rve7N/3FH08er3+7Npn5zXiWzJmptkn0/YTTXPM602I+rkpvqJpiCtxKkpSXJM21E3JApT",
	"dp4WSZcdQ61WvwIAAP//hZ9nt4INAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
