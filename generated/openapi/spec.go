// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yWwW4iORCGX8Wq3SMCssketm87k5mIU6JIOUUcKu0CHHXbnXI1GYR495HthtDTQDIS",
	"gblEHVP+/btcX9lLyF1ZOUtWPGRL8PmMSoyfX5lQ6JY18T291OQljFbsKmIxFGOMUNn++JtpAhn8NXjT",
	"HTSig6g1Eiph1QNZVAQZIDMuYLXqAdNLbZg0ZI+N3HgT5Z6eKZcwreXKV8562mFLh78TxyUKZFDXRsNG",
	"ywsbO41L7lF/8Ae2TCWaoiWfRjr6PbBYRnPdhbf3GqN6jcr4HVNH3/E3ZndAtyTvcbpnFx2xG5LDNn8j",
	"eR/a0aEcd9y9ld+x0heGjJ24aMBIEX67cYrymVNaayVUVgUKqf/vRtCDObE3zkIGw/6wfxE8uYosVgYy",
	"uOwP+5fQgwplFj0NXPAbPyuXKlGTz9lUkkRSXXiFVsVQ9Wpkpip2c6NJq8hQH+IajGHOSEMGd87LbVJO",
	"dUhevji9CPq5s0I2LoVVVZg8Ths8+7Deujm8R/mOvrFq17xwTXEglUnc4j/Di89x0JRitNDOXwxQvs5z",
	"8n5SF8VC5XGm7oejuRoOj+aoTdkOLyM7x8Jo1RyI0ijYuLg6nYsAr3IcakjXuSjrRE1cbdcJ+e90Vu6S",
	"Ba+wYEK9UEyeeN6czb+nPRshtlioaIAVhQn92A98XZbIiw2MGxZD98CpD/29wXgc4ge1/wDSCpWlVxVi",
	"E9MyozeuQ8dTaLVat84u3w/+s/HeviLPQnfrntlXyrvYPhvaxlZ1AvvkMMVkrEGiH8aL/zMo2gPRpvy3",
	"MErkbFE0WBq9CramtIOkexI2NCefMNIkaIrwj7HTyFMcHl1v3Zc2cYYy60DVPGz8SMcbmrEkiSA/Lnel",
	"enQN4WEAGTRq6ZUC8VXRJqW3ld/33h/jDlXHO79fn277qmidyBZa3CT7fHA1p3meG3NzTZ4cqu9oCtJK",
	"nJqSJGLaRN2QKEzZeVqkuuwAtVr9DAAA///RrDICBg4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
