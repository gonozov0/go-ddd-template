// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW8jNwz9K4Lao2E7TXro3NqkDXxqECCnwFgwI9pWMCMpFMeBYfi/L/Thj4nHcXbh",
	"xHvTaCjqkXyP1FKWtnbWoGEvi6X05QxriMtrayaVLvl/Ukj36J01HsMPR9YhscZoVqP3MI0/eOFQFtIz",
	"aTOVq16wVE3J37SKppqxjouJpRpYFrJptJK9/YN5A4hgIVfbDfv0jCUHi2tCYMzYXhr0vA9tc99m8Tvh",
	"RBbyt8E26kEOeRB9jRjrTgCEL40mVLJ4zO7Gx1AdyphWH8jB4Zgf/DshYw26arlPOx05NlB3Ve1NrNGq",
	"l72Mj4A6ecT/Etmf4l6Xs1vk92H+QPI+FNF7Od5Dt6XfqdIXtrSZ2AhAcxX+3VqB5cwKpZRgrF0FjOLv",
	"u5HsyTmS19bIQg77w/5FwGQdGnBaFvKyP+xfyp50wLOIaWAD3rh0NjFRoS9JO05OEi+8ACOiqXjVPBOO",
	"7FwrVCJqqC/jHQThzEjJQt5ZnxqOl4mH6PkfqxbBf2kNo4lXgXOVLuOxwbMP961b1zGVd/SNVZvzTA3G",
	"jUSTGOIfw4vPQZCpGCG08xcNhG/KEr2fNFW1EGU8qfqhNFfD4ckQtVXWgWVk5lBpJXJBhAKGjOLq61AE",
	"8QpLIk8VYSyLiW3MOiF/na5EnaOvA9JdguIFVISgFoLQI81zjf782hoxkoFKRAAkMBzox77gm7oGWmxE",
	"udFk6CIw9aHPZzmPg/2g8R+QtgBh8FUE26RtnuFW36HzCTBKrFvovs4f/GfLfHdUnkXlrXlziNJdGj+b",
	"xLVxTRL4r8HgAwTeUG+Hwom1OwweLLVaBVhT7GDxPTJpnKNPFFbIoKvwoc00cjluj252ZpZJHAee7RE6",
	"Py78SMUpSVAjRxE9LrtqPrqRYTjLQmZv6aUg42Rvs7S3k99jb4DxHqNPV7+3z6dDdF4nskVrysk+H7Fz",
	"Nc8ztTaj6stF9R/oCpVgK6bISTFtRd0iC0jZeVokXu4JarX6HgAA//++GrKAKA4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
